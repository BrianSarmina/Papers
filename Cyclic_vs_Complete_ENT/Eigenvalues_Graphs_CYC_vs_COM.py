# -*- coding: utf-8 -*-
"""Eigenvalues_Graphs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JZ_82nZL1puC0MG9GLVBUGheRlHub6wa
"""

import numpy as np
import matplotlib.pyplot as plt

### RX 7 NODES CYCLIC ###
qfi_7n_cyc_2p_CYC_ENT_rx = np.array([[ 6.56099125, -0.01971329],
                                  [-0.01971329,  6.98501804]])

qfi_7n_cyc_2p_ent_rx = np.array([[ 7.69366997e+00, -5.15560150e-03],
                              [-5.15560150e-03,  6.99685547e+00]])

qfi_7n_cyc_4p_CYC_ENT_rx = np.array([[ 7.03982449,  2.75490547,  0.02533192,  0.02179482],
                                  [ 2.75490547, 10.04136326, -0.0263187,  -0.08681629],
                                  [ 0.02533192, -0.0263187,   7.01038818,  0.05780972],
                                  [ 0.02179482, -0.08681629,  0.05780972,  8.04576378]])

qfi_7n_cyc_4p_ent_rx = np.array([[ 7.19781429,  1.74724674, -0.04522877, -0.5709206 ],
                              [ 1.74724674, 10.9233149,  -0.49628456, -1.00851425],
                              [-0.04522877, -0.49628456,  6.97970932, -0.01594242],
                              [-0.5709206,  -1.00851425, -0.01594242,  7.73913857]])

qfi_7n_cyc_6p_CYC_ENT_rx = np.array([[ 6.28660824e+00,  1.88295944e+00,  6.31825905e-01, -2.64120483e-02, -1.81865692e-03,  5.18771744e-02],
                                  [ 1.88295944e+00,  8.96035725e+00,  1.55012199e+00,  3.57212830e-02, 4.86550522e-02, -8.55564499e-02],
                                  [ 6.31825905e-01,  1.55012199e+00,  8.06044918e+00,  1.89002533e-01, 1.49687958e-02, -5.70648193e-03],
                                  [-2.64120483e-02,  3.57212830e-02,  1.89002533e-01,  7.01115711e+00, 6.59156418e-02, -1.64589691e-02],
                                  [-1.81865692e-03,  4.86550522e-02,  1.49687958e-02,  6.59156418e-02, 8.16518875e+00,  2.56018410e-01],
                                  [ 5.18771744e-02, -8.55564499e-02, -5.70648193e-03, -1.64589691e-02, 2.56018410e-01,  7.92851234e+00]])

qfi_7n_cyc_6p_ent_rx = np.array([[ 7.87297623,  1.97674942,  1.14930557, -0.05451984, -0.7303738, 1.07967537],
                              [ 1.97674942, 10.97746727,  2.16864006, -0.43094063, -1.00809124, -0.03245564],
                              [ 1.14930557,  2.16864006,  9.10862289,  0.11753872, -0.56978577, -0.62149483],
                              [-0.05451984, -0.43094063,  0.11753872,  6.96096859, -0.15305588, -0.14653309],
                              [-0.7303738,  -1.00809124, -0.56978577, -0.15305588,  7.69967819, 0.88623272],
                              [ 1.07967537, -0.03245564, -0.62149483, -0.14653309,  0.88623272, 7.5150246 ]])

### RX 7 NODES COMPLETE ###
qfi_7n_com_2p_CYC_ENT_rx = np.array([[ 9.82390453, -4.17927437],
                                  [-4.17927437, 20.92394314]])

qfi_7n_com_2p_ent_rx = np.array([[ 9.1401046,  -4.6185107 ],
                              [-4.6185107,  20.82459084]])

qfi_7n_com_4p_CYC_ENT_rx = np.array([[10.10125286,  3.56584473, -3.95899761, -1.41238514],
                                  [ 3.56584473, 10.3628685,  -2.11390312, -2.20321114],
                                  [-3.95899761, -2.11390312, 20.80796093,  2.20366745],
                                  [-1.41238514, -2.20321114,  2.20366745, 24.93624821]])

qfi_7n_com_4p_ent_rx = np.array([[ 8.85119884,  3.32657112, -4.2918885,   0.49245636],
                              [ 3.32657112, 10.27173443, -1.75486687, -2.26674755],
                              [-4.2918885,  -1.75486687, 20.72673428,  3.61842182],
                              [ 0.49245636, -2.26674755,  3.61842182, 22.44842175]])

qfi_7n_com_6p_CYC_ENT_rx = np.array([[ 9.70586052,  3.70919731,  1.80605698, -3.44668365, -1.27165825, 0.17116482],
                                  [ 3.70919731, 10.38989265,  2.66184227, -1.88667355, -2.08819698, -1.0669643 ],
                                  [ 1.80605698,  2.66184227,  9.23348072, -0.86101788, -0.82938072, -0.94918324],
                                  [-3.44668365, -1.88667355, -0.86101788, 20.89206165,  2.39165543, 0.92069668],
                                  [-1.27165825, -2.08819698, -0.82938072,  2.39165543, 24.83804523, 4.10059536],
                                  [ 0.17116482, -1.0669643,  -0.94918324,  0.92069668,  4.10059536, 24.48951363]])

qfi_7n_com_6p_ent_rx = np.array([[ 9.42905373,  3.83360325,  1.68538971, -3.96868122,  0.70774448, 0.69032074],
                              [ 3.83360325, 10.61471214,  2.8587627,  -2.16253597, -2.65613155, 0.86404675],
                              [ 1.68538971,  2.8587627,   9.19088017, -0.74257271, -0.89784435, -1.52905956],
                              [-3.96868122, -2.16253597, -0.74257271, 21.03408764,  3.84862259, 1.515835],
                              [ 0.70774448, -2.65613155, -0.89784435,  3.84862259, 23.36684536, 3.2248798],
                              [ 0.69032074,  0.86404675, -1.52905956,  1.515835,    3.2248798, 23.22327835]])

### RX-RY 7 NODE CYCLIC ###
qfi_7n_cyc_3p_CYC_ENT_rxry = np.array([[ 6.47861835,  0.03111504, -0.0082122 ],
                                  [ 0.03111504,  7.6596632,   0.02512947],
                                  [-0.0082122,   0.02512947,  6.99665279]])

qfi_7n_cyc_3p_ent_rxry = np.array([[ 5.9667395, 0.02623341, -0.02956547],
  [ 0.02623341, 11.76406609, -0.25032291],
  [-0.02956547, -0.25032291,  6.99128323]])

qfi_7n_cyc_6p_CYC_ENT_rxry = np.array([[ 6.03258522e+00, -2.83264542e-02, -1.16460800e-02, -2.53000641e-02, -1.25593567e-02,  2.23029129e+00],
                                  [-2.83264542e-02,  8.12035275e+00,  3.63561516e-01, -5.33815384e-02, -4.57494736e-02,  1.07209358e-01],
                                  [-1.16460800e-02,  3.63561516e-01,  7.87402077e+00,  1.57016068e-01, 3.42247009e-03,  9.50138092e-02],
                                  [-2.53000641e-02, -5.33815384e-02,  1.57016068e-01,  7.45027172e+00, -2.96329880e-02, -8.55084610e-02],
                                  [-1.25593567e-02, -4.57494736e-02,  3.42247009e-03, -2.96329880e-02, 6.97868454e+00, -2.41374969e-03],
                                  [ 2.23029129e+00,  1.07209358e-01,  9.50138092e-02, -8.55084610e-02, -2.41374969e-03,  8.73568241e+00]])

qfi_7n_cyc_6p_ent_rxry = np.array([[ 5.71608055,  0.0370662,  0.02744133,  0.04382603, -0.01295311,
    2.11360294],
  [ 0.03706627,  8.26294064, -0.05994015, -0.18731403, -0.30653099,
   -0.143545  ],
  [ 0.02744133, -0.05994015,  9.95048832, -0.02297832, -0.53238647,
    0.23935432],
  [ 0.04382603, -0.18731403, -0.02297832,  7.674221,   -0.04835262,
    0.20729824],
  [-0.01295311, -0.30653099, -0.53238647, -0.04835262,  6.96408592,
    0.28418243],
  [ 2.11360294, -0.143545,    0.23935432,  0.20729824,  0.28418243,
    8.33384026]])

qfi_7n_cyc_9p_CYC_ENT_rxry = np.array([[ 5.76165855e+00, -1.90136604e-01,  1.35664635e-01, -1.26932144e-02, -6.04362488e-03,  9.87991333e-03,  3.17037964e-02,  2.16779697e+00, 2.39466858e-02],
                                  [-1.90136604e-01,  7.61002644e+00,  8.78373718e-02, -1.81302986e-01, -9.45478058e-02,  5.23089218e-02, -2.67028160e-01, -2.96921425e-01, 9.82801056e-01],
                                  [ 1.35664635e-01,  8.78373718e-02,  7.54326881e+00, -2.58630333e-01, -5.59894943e-02, -2.36593246e-02,  2.48596191e-02,  9.27486420e-02, 1.65102158e-01],
                                  [-1.26932144e-02, -1.81302986e-01, -2.58630333e-01,  7.60783676e+00, 1.24437332e-01,  2.93062210e-02, -3.26068878e-03, -5.37520981e-02, -2.92598228e-01],
                                  [-6.04362488e-03, -9.45478058e-02, -5.59894943e-02,  1.24437332e-01, 7.38937992e+00,  1.02222900e-01,  8.66714478e-03,  5.53331375e-02, -6.33148193e-02],
                                  [ 9.87991333e-03,  5.23089218e-02, -2.36593246e-02,  2.93062210e-02, 1.02222900e-01,  7.06977013e+00, -1.22137680e-01, -5.86568451e-02, 8.34204102e-02],
                                  [ 3.17037964e-02, -2.67028160e-01,  2.48596191e-02, -3.26068878e-03, 8.66714478e-03, -1.22137680e-01,  6.95526405e+00,  3.92275238e-02, 2.18906441e-01],
                                  [ 2.16779697e+00, -2.96921425e-01,  9.27486420e-02, -5.37520981e-02, 5.53331375e-02, -5.86568451e-02,  3.92275238e-02,  8.94917191e+00, -9.49300766e-02],
                                  [ 2.39466858e-02,  9.82801056e-01,  1.65102158e-01, -2.92598228e-01, -6.33148193e-02,  8.34204102e-02,  2.18906441e-01, -9.49300766e-02, 7.50230835e+00]])

qfi_7n_cyc_9p_ent_rxry = np.array([[6.33026489, -0.12694027,  0.15966728, -0.08890995,  0.18365658,  -0.12533787,  0.0166478,   2.41473671,  0.26389034],
  [-0.12694027,  7.99340645,  0.01304062, -0.11730377,  0.10192394,  0.12953125, -0.04376427,  0.10912014,  3.69550499],
  [ 0.15966728,  0.01304062,  7.77603729, -0.10861378,  0.23701084,  -0.15582138,  0.09519341, -0.286791,   -0.01263924],
  [-0.08890995, -0.11730377, -0.10861378, 11.18613583,  0.20118538,  0.03104397,  0.26186512,  0.09021233, -0.18523243],
  [ 0.18365658,  0.10192394,  0.23701084,  0.20118538,  8.38431404,  0.05012871, -0.1542841,   0.04511917, -0.16834106],
  [-0.12533787,  0.12953125, -0.15582138,  0.03104397,  0.05012871,  7.31296448,  0.13388508, -0.06275475,  0.06815079],
  [ 0.0166478,  -0.04376427,  0.09519341,  0.26186512, -0.1542841,  0.13388508,  7.02782619, -0.24823376, -0.11345066],
  [ 2.41473671,  0.10912014, -0.286791,    0.09021233,  0.04511917,  -0.06275475, -0.24823376,  8.84862488,  0.66143021],
  [ 0.26389034,  3.69550499, -0.01263924, -0.18523243, -0.16834106,  0.06815079, -0.11345066,  0.66143021,  8.03479729]])


### RX-RY 7 NODE COMPLETE ###
qfi_7n_com_3p_CYC_ENT_rxry = np.array([[ 1.67715275e+01, -1.82219315e-02, -7.18579193e+00],
                                  [-1.82219315e-02,  7.19516914e+00,  1.47607193e-01],
                                  [-7.18579193e+00,  1.47607193e-01,  2.10404208e+01]])

qfi_7n_com_3p_ent_rxry = np.array([[17.01203629,  0.09153202, -7.61818169],
  [ 0.09153202,  7.37398441, -0.31116093],
  [-7.61818169, -0.31116093, 20.93217285]])

qfi_7n_com_6p_CYC_ENT_rxry = np.array([[ 1.63263641e+01,  2.21848373e-01,  1.20209007e-01, -4.31209183e-02, -6.48994072e+00,  1.11232950e+01],
                                  [ 2.21848373e-01,  1.13786391e+01,  4.11964417e-01, -5.27368546e-02, -2.10018806e-01, -9.80548477e-02],
                                  [ 1.20209007e-01,  4.11964417e-01,  7.41915985e+00,  1.43238449e-02, -4.84241486e-02, -1.57814980e-01],
                                  [-4.31209183e-02, -5.27368546e-02,  1.43238449e-02,  7.59874916e+00, 1.17830200e-01, -1.54645157e-01],
                                  [-6.48994072e+00, -2.10018806e-01, -4.84241486e-02,  1.17830200e-01, 2.08668633e+01, -5.73490852e+00],
                                  [ 1.11232950e+01, -9.80548477e-02, -1.57814980e-01, -1.54645157e-01, -5.73490852e+00,  6.53437246e+01]])

qfi_7n_com_6p_ent_rxry = np.array([[ 1.72698076e+01, -1.24631004e-01,  2.46831818e-01,  9.75936127e-02, -6.55158543e+00,  1.58585221e+01],
  [-1.24631004e-01,  1.10905797e+01, -6.63769531e-02, -7.99212265e-02, -3.24820404e-01, -3.72205009e-01],
  [ 2.46831818e-01, -6.63769531e-02,  7.34590996e+00, -6.86698151e-02, -9.88104630e-02,  8.30954781e-01],
  [ 9.75936127e-02, -7.99212265e-02, -6.86698151e-02,  7.85045597e+00, 3.49448395e-02,  4.58073158e-01],
  [-6.55158543e+00, -3.24820404e-01, -9.88104630e-02,  3.49448395e-02, 2.10020381e+01, -6.22356758e+00],
  [ 1.58585221e+01, -3.72205009e-01,  8.30954781e-01,  4.58073158e-01, -6.22356758e+00,  6.27362177e+01]])

qfi_7n_com_9p_CYC_ENT_rxry = np.array([[ 1.70234671e+01,  2.01597977e-02, -1.31548271e-01, -7.92358017e-02, -1.09294128e-02,  9.57008362e-03, -6.29577808e+00,  1.19894876e+01, 2.67626476e+00],
                                  [ 2.01597977e-02,  1.01537922e+01, -2.06150055e-02, -6.00872040e-03, -2.03044128e-02, -3.43091965e-02,  1.40537643e-01, -8.75427551e-01, 1.87097736e+00],
                                  [-1.31548271e-01, -2.06150055e-02,  8.10907608e+00, -8.16449738e-02, 6.69148636e-02, -6.60194397e-03,  2.73462601e-01, -1.40891380e-01, 1.53601074e-02],
                                  [-7.92358017e-02, -6.00872040e-03, -8.16449738e-02,  7.54067188e+00, -9.58454132e-03,  2.52363968e-02,  2.27729607e-01, -2.10201836e-01, 1.80512619e-02],
                                  [-1.09294128e-02, -2.03044128e-02,  6.69148636e-02, -9.58454132e-03, 7.30344379e+00, -9.09798431e-02,  5.54767609e-02, -9.25172043e-02, -1.85341835e-01],
                                  [ 9.57008362e-03, -3.43091965e-02, -6.60194397e-03,  2.52363968e-02, -9.09798431e-02,  7.09344990e+00,  2.19923782e-02,  1.73066750e-01, -3.96496887e-01],
                                  [-6.29577808e+00,  1.40537643e-01,  2.73462601e-01,  2.27729607e-01, 5.54767609e-02,  2.19923782e-02,  2.08964480e+01, -6.57441017e+00, -6.91212082e-01],
                                  [ 1.19894876e+01, -8.75427551e-01, -1.40891380e-01, -2.10201836e-01, -9.25172043e-02,  1.73066750e-01, -6.57441017e+00,  6.60317496e+01, 1.88256107e+00],
                                  [ 2.67626476e+00,  1.87097736e+00,  1.53601074e-02,  1.80512619e-02, -1.85341835e-01, -3.96496887e-01, -6.91212082e-01,  1.88256107e+00, 3.87700134e+01]])

qfi_7n_com_9p_ent_rxry = np.array([[1.90646869e+01, -7.79838257e-01, -2.37170067e-01, -2.41487846e-01,  7.11612701e-02,  2.03210068e-02, -6.97088634e+00,  1.72476240e+01,
    3.00817463e+00],
  [-7.79838257e-01,  1.08205490e+01, -8.31989288e-03, -3.18125534e-01,  -1.02307510e-02,  1.40305939e-01,  2.09728622e-02,  6.07592392e-02,
    5.77149651e+00],
  [-2.37170067e-01, -8.31989288e-03,  9.50536560e+00, -1.34948692e-01,  2.62971115e-02, -1.21160660e-01,  2.82105637e-01, -1.04813766e+00,
   -4.27445869e-01],
  [-2.41487846e-01, -3.18125534e-01, -1.34948692e-01,  7.56736446e+00,  2.49254608e-02, -8.64850998e-02,  5.36349869e-01,  8.14741135e-02,
   -5.21873741e-01],
  [ 7.11612701e-02, -1.02307510e-02,  2.62971115e-02,  2.49254608e-02,  8.27198185e+00, -1.16442528e-01,  9.97914124e-02,  2.32399406e-01,
    1.42164154e-01],
  [ 2.03210068e-02,  1.40305939e-01, -1.21160660e-01, -8.64850998e-02,  -1.16442528e-01,  7.36787582e+00, -6.79119492e-02,  1.42154388e-01,
    1.03389587e-01],
  [-6.97088634e+00,  2.09728622e-02,  2.82105637e-01,  5.36349869e-01,  9.97914124e-02, -6.79119492e-02,  2.10993729e+01, -7.78698280e+00,
   -1.53604385e+00],
  [ 1.72476240e+01,  6.07592392e-02, -1.04813766e+00,  8.14741135e-02,  2.32399406e-01,  1.42154388e-01, -7.78698280e+00,  6.58518772e+01,
    6.80752892e+00],
  [ 3.00817463e+00,  5.77149651e+00, -4.27445869e-01, -5.21873741e-01,  1.42164154e-01,  1.03389587e-01, -1.53604385e+00,  6.80752892e+00,
    4.08948115e+01]])


# --- Funciones auxiliares ---

def info_eigen(matrix):
    """
    Dado que las matrices QFI suelen ser reales y simétricas,
    usamos np.linalg.eigvalsh para obtener sus eigenvalores de forma estable.
    Retorna (traza, eigenval_min, eigenval_max).
    """
    w = np.linalg.eigvalsh(matrix)
    return np.trace(matrix), w[0], w[-1]

def obtener_curvas(matrices):
    """
    matrices: lista de matrices QFI para p en orden ascendente
    Retorna tres listas, con la traza, eigenval_min, eigenval_max
    correspondiente a cada matriz en 'matrices'.
    """
    trazas = []
    mins   = []
    maxs   = []
    for mat in matrices:
        tr, wmin, wmax = info_eigen(mat)
        trazas.append(tr)
        mins.append(wmin)
        maxs.append(wmax)
    return trazas, mins, maxs


# Parámetros generales
N = 7
linear_scaling = 4 * N       # 4*N
heisenberg_lim = 4*(N**2)        # N^2

# 1) BLOQUE: RX 7 NODES CYCLIC
p_cyc_rx = [2, 4, 6]
mats_cyc_ent_rx = [qfi_7n_cyc_2p_CYC_ENT_rx, qfi_7n_cyc_4p_CYC_ENT_rx, qfi_7n_cyc_6p_CYC_ENT_rx]
mats_ent_rx     = [qfi_7n_cyc_2p_ent_rx,    qfi_7n_cyc_4p_ent_rx,    qfi_7n_cyc_6p_ent_rx]

# Curvas CYC_ENT
cyc_ent_trace, cyc_ent_min, cyc_ent_max = obtener_curvas(mats_cyc_ent_rx)
# Curvas ent
ent_trace, ent_min, ent_max = obtener_curvas(mats_ent_rx)

# 2) BLOQUE: RX 7 NODES COMPLETE
p_com_rx = [2, 4, 6]
mats_cyc_ent_rx_com = [qfi_7n_com_2p_CYC_ENT_rx, qfi_7n_com_4p_CYC_ENT_rx, qfi_7n_com_6p_CYC_ENT_rx]
mats_ent_rx_com     = [qfi_7n_com_2p_ent_rx,    qfi_7n_com_4p_ent_rx,    qfi_7n_com_6p_ent_rx]

cyc_ent_trace_com, cyc_ent_min_com, cyc_ent_max_com = obtener_curvas(mats_cyc_ent_rx_com)
ent_trace_com, ent_min_com, ent_max_com = obtener_curvas(mats_ent_rx_com)

# 3) BLOQUE: RX-RY 7 NODES CYCLIC
p_cyc_rxry = [3, 6, 9]
mats_cyc_ent_rxry_cyc = [
    qfi_7n_cyc_3p_CYC_ENT_rxry,
    qfi_7n_cyc_6p_CYC_ENT_rxry,
    qfi_7n_cyc_9p_CYC_ENT_rxry
]
mats_ent_rxry_cyc = [
    qfi_7n_cyc_3p_ent_rxry,
    qfi_7n_cyc_6p_ent_rxry,
    qfi_7n_cyc_9p_ent_rxry
]

cyc_ent_trace_rxry_cyc, cyc_ent_min_rxry_cyc, cyc_ent_max_rxry_cyc = obtener_curvas(mats_cyc_ent_rxry_cyc)
ent_trace_rxry_cyc, ent_min_rxry_cyc, ent_max_rxry_cyc = obtener_curvas(mats_ent_rxry_cyc)


# 4) BLOQUE: RX-RY 7 NODES COMPLETE
p_com_rxry = [3, 6, 9]
mats_cyc_ent_rxry_com = [
    qfi_7n_com_3p_CYC_ENT_rxry,
    qfi_7n_com_6p_CYC_ENT_rxry,
    qfi_7n_com_9p_CYC_ENT_rxry
]
mats_ent_rxry_com = [
    qfi_7n_com_3p_ent_rxry,
    qfi_7n_com_6p_ent_rxry,
    qfi_7n_com_9p_ent_rxry
]

cyc_ent_trace_rxry_com, cyc_ent_min_rxry_com, cyc_ent_max_rxry_com = obtener_curvas(mats_cyc_ent_rxry_com)
ent_trace_rxry_com, ent_min_rxry_com, ent_max_rxry_com = obtener_curvas(mats_ent_rxry_com)

# Creamos la figura con 4 subplots organizados en una cuadrícula 2 x 2
fig, axs = plt.subplots(2, 2, figsize=(10, 8))

# === SUBPLOT 1: RX 7 NODES CYCLIC ===
#axs[0, 0].plot(p_cyc_rx, cyc_ent_trace, 'o--', label='CYC_ENT trace')
axs[0, 0].plot(p_cyc_rx, cyc_ent_min,   'v--', label='CYC-ENT min eig')
axs[0, 0].plot(p_cyc_rx, cyc_ent_max,   '^--', label='CYC-ENT max eig')

#axs[0, 0].plot(p_cyc_rx, ent_trace, 'o-', label='ent trace')
axs[0, 0].plot(p_cyc_rx, ent_min,   'v-', label='COM-ENT min eig')
axs[0, 0].plot(p_cyc_rx, ent_max,   '^-', label='COM-ENT max eig')

axs[0, 0].axhline(linear_scaling, color='black', linestyle=':', 
                  label=f'4*N = {linear_scaling}')
axs[0, 0].axhline(heisenberg_lim, color='black', linestyle='--', 
                  label=f'4*(N^2) = {heisenberg_lim}')
axs[0, 0].set_title('RX 7 NODES CYCLIC')
axs[0, 0].set_xlabel('Número de parámetros (p)')
axs[0, 0].set_ylabel('Valor')
axs[0, 0].grid(True)
axs[0, 0].legend(loc='best')

# === SUBPLOT 2: RX 7 NODES COMPLETE ===
#axs[0, 1].plot(p_com_rx, cyc_ent_trace_com, 'o--', label='CYC_ENT trace')
axs[0, 1].plot(p_com_rx, cyc_ent_min_com,   'v--', label='CYC-ENT min eig')
axs[0, 1].plot(p_com_rx, cyc_ent_max_com,   '^--', label='CYC-ENT max eig')

#axs[0, 1].plot(p_com_rx, ent_trace_com, 'o-', label='ent trace')
axs[0, 1].plot(p_com_rx, ent_min_com,   'v-', label='COM-ENT min eig')
axs[0, 1].plot(p_com_rx, ent_max_com,   '^-', label='COM-ENT max eig')

axs[0, 1].axhline(linear_scaling, color='black', linestyle=':', 
                  label=f'4*N = {linear_scaling}')
axs[0, 1].axhline(heisenberg_lim, color='black', linestyle='--', 
                  label=f'4*(N^2) = {heisenberg_lim}')
axs[0, 1].set_title('RX 7 NODES COMPLETE')
axs[0, 1].set_xlabel('Número de parámetros (p)')
axs[0, 1].set_ylabel('Valor')
axs[0, 1].grid(True)
axs[0, 1].legend(loc='best')

# === SUBPLOT 3: RX-RY 7 NODES CYCLIC ===
#axs[1, 0].plot(p_cyc_rxry, cyc_ent_trace_rxry_cyc, 'o--', label='CYC_ENT trace')
axs[1, 0].plot(p_cyc_rxry, cyc_ent_min_rxry_cyc,   'v--', label='CYC-ENT min eig')
axs[1, 0].plot(p_cyc_rxry, cyc_ent_max_rxry_cyc,   '^--', label='CYC-ENT max eig')

#axs[1, 0].plot(p_cyc_rxry, ent_trace_rxry_cyc, 'o-', label='ent trace')
axs[1, 0].plot(p_cyc_rxry, ent_min_rxry_cyc,   'v-', label='COM-ENT min eig')
axs[1, 0].plot(p_cyc_rxry, ent_max_rxry_cyc,   '^-', label='COM-ENT max eig')

axs[1, 0].axhline(linear_scaling, color='black', linestyle=':', 
                  label=f'4*N = {linear_scaling}')
axs[1, 0].axhline(heisenberg_lim, color='black', linestyle='--', 
                  label=f'4*(N^2) = {heisenberg_lim}')
axs[1, 0].set_title('RX-RY 7 NODES CYCLIC')
axs[1, 0].set_xlabel('Número de parámetros (p)')
axs[1, 0].set_ylabel('Valor')
axs[1, 0].grid(True)
axs[1, 0].legend(loc='best')

# === SUBPLOT 4: RX-RY 7 NODES COMPLETE ===
#axs[1, 1].plot(p_com_rxry, cyc_ent_trace_rxry_com, 'o--', label='CYC_ENT trace')
axs[1, 1].plot(p_com_rxry, cyc_ent_min_rxry_com,   'v--', label='CYC-ENT min eig')
axs[1, 1].plot(p_com_rxry, cyc_ent_max_rxry_com,   '^--', label='CYC-ENT max eig')

#axs[1, 1].plot(p_com_rxry, ent_trace_rxry_com, 'o-', label='ent trace')
axs[1, 1].plot(p_com_rxry, ent_min_rxry_com,   'v-', label='COM-ENT min eig')
axs[1, 1].plot(p_com_rxry, ent_max_rxry_com,   '^-', label='COM-ENT max eig')

axs[1, 1].axhline(linear_scaling, color='black', linestyle=':', 
                  label=f'4*N = {linear_scaling}')
axs[1, 1].axhline(heisenberg_lim, color='black', linestyle='--', 
                  label=f'4*(N^2) = {heisenberg_lim}')
axs[1, 1].set_title('RX-RY 7 NODES COMPLETE')
axs[1, 1].set_xlabel('Número de parámetros (p)')
axs[1, 1].set_ylabel('Valor')
axs[1, 1].grid(True)
axs[1, 1].legend(loc='best')

plt.tight_layout()
plt.show()

# ### RX RESULTS ###
# matrices_7n_2p_cycENT = [qfi_7n_cyc_2p_CYC_ENT_rx, qfi_7n_com_2p_CYC_ENT_rx]
# matrices_7n_2p_comENT = [qfi_7n_cyc_2p_ent_rx, qfi_7n_com_2p_ent_rx]
# matrices_7n_4p_cycENT = [qfi_7n_cyc_4p_CYC_ENT_rx, qfi_7n_com_4p_CYC_ENT_rx]
# matrices_7n_4p_comENT = [qfi_7n_cyc_4p_ent_rx, qfi_7n_com_4p_ent_rx]
# matrices_7n_6p_cycENT = [qfi_7n_cyc_6p_CYC_ENT_rx, qfi_7n_com_6p_CYC_ENT_rx]
# matrices_7n_6p_comENT = [qfi_7n_cyc_6p_ent_rx, qfi_7n_com_6p_ent_rx]

# ### RX-RY RESULTS ###
# matrices_7n_3p_cycENT = [qfi_7n_cyc_3p_CYC_ENT_rxry, qfi_7n_com_3p_CYC_ENT_rxry]
# matrices_7n_3p_comENT = [qfi_7n_cyc_3p_ent_rxry, qfi_7n_com_3p_ent_rxry]
# matrices_7n_6p_cycENT_rxry = [qfi_7n_cyc_6p_CYC_ENT_rxry, qfi_7n_com_6p_CYC_ENT_rxry]
# matrices_7n_6p_comENT_rxry = [qfi_7n_cyc_6p_ent_rxry, qfi_7n_com_6p_ent_rxry]
# matrices_7n_9p_cycENT = [qfi_7n_cyc_9p_CYC_ENT_rxry, qfi_7n_com_9p_CYC_ENT_rxry]
# matrices_7n_9p_comENT = [qfi_7n_cyc_9p_ent_rxry, qfi_7n_com_9p_ent_rxry]

# list_of_matrices_rx = [matrices_7n_2p_cycENT, matrices_7n_2p_comENT, matrices_7n_4p_cycENT, matrices_7n_4p_comENT, matrices_7n_6p_cycENT, matrices_7n_6p_comENT]
# list_of_matrices_rxry = [matrices_7n_3p_cycENT, matrices_7n_3p_comENT, matrices_7n_6p_cycENT_rxry, matrices_7n_6p_comENT_rxry, matrices_7n_9p_cycENT, matrices_7n_9p_comENT]

# def get_eigenvalues(matrices):
#   highest_eigenvalues = []
#   lowest_eigenvalues = []
#   for matrix in matrices:
#     eigenvalues = np.linalg.eigvals(matrix)
#     highest_eigenvalues.append(np.max(eigenvalues))
#     lowest_eigenvalues.append(np.min(eigenvalues))
#     # print(matrix)
#     # print(eigenvalues)
#     # print("\n")
#   return highest_eigenvalues, lowest_eigenvalues

# # Set up the figure and axes
# fig, axis = plt.subplots(1, 2, figsize=(10, 8))

# # print("Cyclic problems with non-entangled mixing operators")
# # plot_colors = ['blue', 'green', 'red']
# # plot_names = ["2p non-ent", "4p non-ent", "6p non-ent"]
# # count_color = 0
# # for matrix in list_of_matrices_cyclic_non:
# #   highest_eigenvalues, lowest_eigenvalues = get_eigenvalues(matrix)
# #   x_axis = [4, 7, 10] # number of nodes
# #   # print("Highest: ", highest_eigenvalues)
# #   # print("Lowest: ", lowest_eigenvalues)
# #   axis[0].plot(x_axis, highest_eigenvalues, label=plot_names[count_color], color=plot_colors[count_color])
# #   axis[0].plot(x_axis, lowest_eigenvalues, label='Lowest Eigenvalue', color=plot_colors[count_color], linestyle='dotted')
# #   count_color += 1

# # axis[0].plot([x for x in range(4, 11)], [4*(x) for x in range(4, 11)], label="Linear scaling", color='black', linestyle='dashed')
# # axis[0].set_xlabel("Number of nodes")
# # axis[0].set_ylabel("Eigenvalue")
# # axis[0].set_title("Cyclic max-cut with RX non-entangled mixing operators")
# # axis[0].grid()
# # axis[0].legend()

# # print("Cyclic problems with entangled mixing operators")
# # plot_colors = ['blue', 'green', 'red']
# # plot_names = ["2p ent", "4p ent", "6p ent"]
# # count_color = 0
# # for matrix in list_of_matrices_cyclic_ent:
# #   highest_eigenvalues, lowest_eigenvalues = get_eigenvalues(matrix)
# #   x_axis = [4, 7, 10] # number of nodes
# #   # print("Highest: ", highest_eigenvalues)
# #   # print("Lowest: ", lowest_eigenvalues)
# #   axis[1].plot(x_axis, highest_eigenvalues, label=plot_names[count_color], color=plot_colors[count_color])
# #   axis[1].plot(x_axis, lowest_eigenvalues, label='Lowest Eigenvalue', color=plot_colors[count_color], linestyle='dotted')
# #   count_color += 1

# # axis[1].plot([x for x in range(4, 11)], [4*(x) for x in range(4, 11)], label="Linear scaling", color='black', linestyle='dashed')
# # axis[1].set_xlabel("Number of nodes")
# # axis[1].set_ylabel("Eigenvalue")
# # axis[1].set_title("Cyclic max-cut with RX entangled mixing operators")
# # axis[1].grid()
# # axis[1].legend()

# print("Complete problems with non-entangled mixing operators")
# plot_colors = ['blue', 'green', 'red', 'orange', 'yellow', 'green']
# plot_names = ["matrices_7n_2p_cycENT", "matrices_7n_2p_comENT", "matrices_7n_4p_cycENT", "matrices_7n_4p_comENT", "matrices_7n_6p_cycENT", "matrices_7n_6p_comENT"]
# count_color = 0
# for matrix in list_of_matrices_rx:
#   highest_eigenvalues, lowest_eigenvalues = get_eigenvalues(matrix)
#   x_axis = [7, 10] # number of nodes
#   # print("Highest: ", highest_eigenvalues)
#   # print("Lowest: ", lowest_eigenvalues)
#   axis[0].plot(x_axis, highest_eigenvalues, label=plot_names[count_color], color=plot_colors[count_color])
#   axis[0].plot(x_axis, lowest_eigenvalues, label='Lowest Eigenvalue', color=plot_colors[count_color], linestyle='dotted')
#   count_color += 1

# axis[0].plot([x for x in range(4, 11)], [4*(x) for x in range(4, 11)], label="Linear scaling", color='black', linestyle='dashed')
# axis[0].plot([x for x in range(4, 11)], [4*(x**2) for x in range(4, 11)], label="Heisenberg limit", color='black', linestyle='dashdot')
# axis[0].set_xlabel("Number of nodes")
# axis[0].set_ylabel("Eigenvalue")
# axis[0].set_title("Complete max-cut with RX non-entangled mixing operators")
# axis[0].grid()
# axis[0].legend()


# print("Complete problems with entangled mixing operators")
# plot_colors = ['blue', 'green', 'red', 'orange', 'yellow', 'green']
# plot_names = ["matrices_7n_2p_cycENT", "matrices_7n_2p_comENT", "matrices_7n_4p_cycENT", "matrices_7n_4p_comENT", "matrices_7n_6p_cycENT", "matrices_7n_6p_comENT"]
# count_color = 0
# for matrix in list_of_matrices_rxry:
#   highest_eigenvalues, lowest_eigenvalues = get_eigenvalues(matrix)
#   x_axis = [7, 10] # number of nodes
#   # print("Highest: ", highest_eigenvalues)
#   # print("Lowest: ", lowest_eigenvalues)
#   axis[1].plot(x_axis, highest_eigenvalues, label=plot_names[count_color], color=plot_colors[count_color])
#   axis[1].plot(x_axis, lowest_eigenvalues, label='Lowest Eigenvalue', color=plot_colors[count_color], linestyle='dotted')
#   count_color += 1

# axis[1].plot([x for x in range(4, 11)], [4*(x) for x in range(4, 11)], label="Linear scaling", color='black', linestyle='dashed')
# axis[1].plot([x for x in range(4, 11)], [4*(x**2) for x in range(4, 11)], label="Heisenberg limit", color='black', linestyle='dashdot')
# axis[1].set_xlabel("Number of nodes")
# axis[1].set_ylabel("Eigenvalue")
# axis[1].set_title("Complete max-cut with RX entangled mixing operators")
# axis[1].grid()
# axis[1].legend()

# plt.show()